# TODO: build image in OpenShift (need BuildConfig's and ImageStream's)
# âš  Build in test, promote to prod (Do not rebuild on prod!)

- name: Secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: payonline-secrets
        namespace: "{{ openshift_namespace }}"
      type: Opaque
      data:
        dbs.conf:     "{{ _dbs_conf_contents     | b64encode }}"
        secrets.conf: "{{ _secrets_conf_contents | b64encode }}"
        params:       "{{ _params_contents       | b64encode }}"
  vars:
    _ks: "{{ keybase_secrets }}"
    _p: >-
      {{ _ks.payonline_database }}
    _dbs_conf_contents: |
      {% for k, v in _ks.cadidb_databases.items() %}
      {{ k }}	{{ v.dbname }}	{{ v.server }}	{{ v.user }}	{{ v.password }}
      {% endfor %}
      payonline	{{ _p.dbname }}	{{ _p.server }}	{{ _p.user }}	{{ _p.password }}
    _secrets_conf_contents: |
      aga.accred	{{ _ks.aga_accred }}
      afm.cadi	{{ _ks.afm_cadi }}
      People.key	{{ _ks.People_key }}
    _params_contents: |
      $PayonlineShopID      = '{{ _ks.PayonlineShopID }}';
      $HMAC_salts  = {
         epfl => {
           prod => '{{ _ks.HMAC_salts.epfl.prod }}',
           test => '{{ _ks.HMAC_salts.epfl.test }}',
         },
         unil => {
           in => '{{ _ks.HMAC_salts.unil.in }}',
           out => '{{ _ks.HMAC_salts.unil.out }}',
         }
      };
  tags:
    - payonline.k8s.secret

- name: Service
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: payonline-service
        namespace: "{{ openshift_namespace }}"
        labels:
          app: payonline
      spec:
        ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
        selector:
          deploymentconfig: payonline
  tags:
    - payonline.k8s.service

- name: Route
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: payonline-route
        namespace: "{{ openshift_namespace }}"
        labels:
          app: payonline
          epfl.ch/visibility: public
      spec:
        host: "{{ payonline_hostname }}"
        port:
          targetPort: 8080-tcp
        tls:
          termination: edge
        to:
          kind: Service
          name: payonline-service
          weight: 100
        wildcardPolicy: None
  tags:
    - payonline.k8s.route

- name: Config Map
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: payonline-conf
        namespace: "{{ openshift_namespace }}"
      data:
        E2EM_LINE: >-
          {{ "prod" if inventory_environment == "prod" else "test" }}
        MOCK_ORACLE: "{{ '0' if inventory_environment == 'prod' else '1' }}"
        SITE_URL: "{{ payonline_hostname }}"
        TEQUILA_HOST: "{{ 'tequila.epfl.ch' if inventory_environment == 'prod' else 'test-tequila.epfl.ch' }}"
        PAYONLINE_MAIL_SF_RECIPIENTS: >-
          {{ payonline_mail_sf_recipients[inventory_environment] | join(", ") }}
        PAYONLINE_SUPERUSER_GROUP: "{{ payonline_superuser_group }}"
        PAYONLINE_INSTANCE_VALIDATION_NOTIFICATION_EMAIL: "{{ payonline_instance_validation_notification_email }}"
        PAYONLINE_FORMCONT_ADMIN_GROUP: "{{ payonline_formcont_admin_group }}"
  tags:
    - payonline.k8s.config
    - payonline.k8s.configmap

- name: Promote image
  when:
    - >-
      inventory_environment == "prod"
    - >-
      "payonline.k8s.promote" in ansible_run_tags
  shell:
    cmd: |
      oc tag payonline-test/payonline:develop {{ openshift_namespace }}/payonline:{{ openshift_image_tag }}
  tags:
    - payonline.k8s.promote

- name: Deployment Config
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: apps.openshift.io/v1
      kind: DeploymentConfig
      metadata:
        name: payonline
        namespace: "{{ openshift_namespace }}"
        labels:
          app: payonline
      spec:
        replicas: 1
        selector:
          app: payonline
          deploymentconfig: payonline
        template:
          metadata:
            labels:
              app: payonline
              deploymentconfig: payonline
          spec:
            containers:
              - name: payonline
                imagePullPolicy: Always
                volumeMounts:
                  - mountPath: /opt/dinfo/etc
                    name: payonline-secret-volume
                envFrom:
                  - configMapRef:
                      name: payonline-conf
            volumes:
              - name: payonline-secret-volume
                secret:
                  secretName: payonline-secrets
        triggers:
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - payonline
              from:
                kind: ImageStreamTag
                name: "payonline:{{ openshift_image_tag }}"
                namespace: "{{ openshift_namespace }}"
          - type: ConfigChange
  tags:
    - payonline.k8s.dc
    - payonline.k8s.deploymentconfig

- name: Cron job
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: payonline-extract-transactions
        namespace: "{{ openshift_namespace }}"
      spec:
        schedule: "{{ _all_the_time if payonline_debug_crontab is defined else payonline_extract_transaction_cron_schedule }}"
        concurrencyPolicy: "Replace"
        startingDeadlineSeconds: 200
        suspend: false
        successfulJobsHistoryLimit: 3
        failedJobsHistoryLimit: 1
        jobTemplate:
          spec:
            template:
              spec:
                containers:
                - name: payonline-extract-transactions
                  image: "{{ openshift_image }}"
                  imagePullPolicy: Always
                  volumeMounts:
                    - mountPath: /opt/dinfo/etc
                      name: payonline-secret-volume
                  command:
                    - /opt/dinfo/scripts/extract_transactions
                  envFrom:
                    - configMapRef:
                        name: payonline-conf
                volumes:
                  - name: payonline-secret-volume
                    secret:
                      secretName: payonline-secrets
                restartPolicy: Never
  vars:
    _all_the_time: "* * * * *"
  tags:
    - payonline.k8s.cron
